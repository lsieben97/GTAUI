<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
int max = 16;
#>
using System;
using System.Reflection;

namespace GTAUI
{
    /// <summary>
    /// Wrapper class for either a <see cref="MethodInfo"/> object or an <see cref="Action"/> delegate.
    /// </summary>
    public class InvokableMethod
    {
        private readonly Action action = null;
        private readonly MethodInfo methodInfo = null;


        /// <summary>
        /// Create a new InvokableMethod with the given action.
        /// </summary>
        /// <param name="action">The action to wrap.</param>
        public InvokableMethod(Action action)
        {
            this.action = action;
        }

        /// <summary>
        /// Create a new InvokableMethod with the given action.
        /// </summary>
        /// <param name="methodInfo">The MethodInfo object to wrap.</param>
        public InvokableMethod(MethodInfo methodInfo)
        {
            this.methodInfo = methodInfo;
        }

        /// <summary>
        /// Invoke The action if it's not null. if it is, try to invoke the method if that is not null.
        /// </summary>
        /// <param name="target">The target to execute the method on.</param>
        /// <param name="arguments">The arguments to send to the method.</param>
        /// <returns>The return value of the method. Invoking the action will always return null.</returns>
        public object Invoke(object target, object[] arguments)
        {
            if (action != null)
            {
                action();
                return null;
            }
            else if (methodInfo != null)
            {
                return methodInfo.Invoke(target, arguments);
            }

            return null;
        }

        /// <summary>
        /// Check whether the wrapped action and method are both null.
        /// If this returns <c>true</c>, calling the <see cref="Invoke(object, object[])"/> method will do nothing.
        /// </summary>
        /// <returns><c>true</c> if both the wrapped action and method are null.</returns>
        public bool IsNull()
        {
            return action == null && methodInfo == null;
        }
    }
<#
string tArguments = "T";
string argumentsDeclaration = "T argument";
string argumentsList = "argument";
for (int i = 1; i<=max; i++)
{ 
if (i > 1)
{
    tArguments += ", T" + i;
    argumentsDeclaration += ", T" + i + " argument" + i;
    argumentsList += ", argument" + i;
}
#>

    /// <summary>
    /// Wrapper class for either a <see cref="MethodInfo"/> object or an <see cref="Action{<#= tArguments #>}"/> delegate.
    /// </summary>
    public class InvokableMethod<<#= tArguments #>>
    {
        private readonly Action<<#= tArguments #>> action;
        private readonly MethodInfo methodInfo = null;

        /// <summary>
        /// Create a new InvokableMethod with the given action.
        /// </summary>
        /// <param name="action">The action to wrap.</param>
        public InvokableMethod(Action<<#= tArguments #>> action)
        {
            this.action = action;
        }

        /// <summary>
        /// Create a new InvokableMethod with the given action.
        /// </summary>
        /// <param name="methodInfo">The MethodInfo object to wrap.</param>
        public InvokableMethod(MethodInfo methodInfo)
        {
            this.methodInfo = methodInfo;
        }

        /// <summary>
        /// Invoke The action if it's not null. if it is, try to invoke the method if that is not null.
        /// </summary>
        /// <param name="target">The target to execute the method on.</param>
        /// <param name="argument">The argument of the action or method.</param>
        /// <returns>The return value of the method. Invoking the action will always return null.</returns>
        public object Invoke(object target, <#= argumentsDeclaration #>)
        {
            if (action != null)
            {
                action(<#= argumentsList #>);
                return null;
            }
            else if (methodInfo != null)
            {
                return methodInfo.Invoke(target, new object[] { <#= argumentsList #> });
            }

            return null;
        }

        /// <summary>
        /// Check whether the wrapped action and method are both null.
        /// If this returns <c>true</c>, calling the <see cref="Invoke(object, <#= tArguments #>)"/> method will do nothing.
        /// </summary>
        /// <returns><c>true</c> if both the wrapped action and method are null.</returns>
        public bool IsNull()
        {
            return action == null && methodInfo == null;
        }
    }
    <# } #>
}
